(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{157:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"metadata",(function(){return c})),n.d(t,"default",(function(){return b}));var i=n(1),a=n(9),r=(n(0),n(189)),o={id:"entity",title:"Entity"},l=[{value:"Exploring The Entity Class",id:"exploring-the-entity-class",children:[{value:"state",id:"state",children:[]},{value:"Individual",id:"individual",children:[]}]},{value:"Entity Companion Object",id:"entity-companion-object",children:[{value:"entityEqual",id:"entityequal",children:[]},{value:"entityFitness",id:"entityfitness",children:[]}]},{value:"Summary",id:"summary",children:[]}],c={id:"community-tutorial/entity",title:"Entity",description:"By now you should have enough some experience with `Entity`.",source:"@site/docs/community-tutorial/entity.md",permalink:"/docs/community-tutorial/entity"},p={rightToc:l,metadata:c},s="wrapper";function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)(s,Object(i.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"By now you should have enough some experience with ",Object(r.b)("inlineCode",{parentName:"p"},"Entity"),'.\nIf not, refer to the "A Quick Look at Entity" section in the ',Object(r.b)("inlineCode",{parentName:"p"},"Lenses")," chapter.\nThus we can say the following about ",Object(r.b)("inlineCode",{parentName:"p"},"Entity"),"."),Object(r.b)("div",{class:"callout callout-info"},Object(r.b)("p",null,"An ",Object(r.b)("inlineCode",{parentName:"p"},"Entity")," is a simple structure that contains and manages two very\nspecific things:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"A ",Object(r.b)("inlineCode",{parentName:"li"},"Position[A]")," within the current search space of the problem"),Object(r.b)("li",{parentName:"ul"},'A "state" that contains all addition data required by the ',Object(r.b)("inlineCode",{parentName:"li"},"Entity"),"\nwhich is not managed by the ",Object(r.b)("inlineCode",{parentName:"li"},"Position[A]"),"."))),Object(r.b)("p",null,"An ",Object(r.b)("inlineCode",{parentName:"p"},"Enity")," is used to represent a singular ",Object(r.b)("em",{parentName:"p"},"thing")," exploring the search space.\nThis ",Object(r.b)("em",{parentName:"p"},"thing")," changes from algorithm to algorithm.\n","[Gary][Link-Gary]"," gives a clear explanation in the following segment as to why CILib uses ",Object(r.b)("inlineCode",{parentName:"p"},"Entity"),"."),Object(r.b)("div",{class:"callout callout-danger"},Object(r.b)("p",null,"Within swarm intelligence, evolutionary computation and other, similar\nalgorithms, there is always a metaphor that the algorithm is based on.\nUsing this metaphor, the participants within the algorithm are also\nappropriately named. For example, within a Particle Swarm Optimization (PSO),\nthe participants are referred to as Particles, with Individuals being\nused in both Differential Evolution (DE) and Genetic Algorithms (GA).\nMany other examples can easily be identified in available literature."),Object(r.b)("p",null,"It is not practical to have several representations for a very similar\nconcept used within these algorithms. Based on experimentation within CIlib,\na common structure was identified that could be used to represent the\nparticipants for these metaphor-based population based algorithms. We\nrefer, collectively, to these algorithm participants as ",Object(r.b)("inlineCode",{parentName:"p"},"Entity")," instances.")),Object(r.b)("h2",{id:"exploring-the-entity-class"},"Exploring The Entity Class"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Entity")," has the following constructor:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Entity[S,A](state: S, pos: Position[A])"))),Object(r.b)("p",null,"Where..."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"S")," is the type of the state that the ",Object(r.b)("inlineCode",{parentName:"li"},"Entity")," maintains."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"A")," is the type of the dimension element within a ",Object(r.b)("inlineCode",{parentName:"li"},"Position[A]"),".")),Object(r.b)("h3",{id:"state"},"state"),Object(r.b)("p",null,"A we discussed before, the state of an ",Object(r.b)("inlineCode",{parentName:"p"},"Entity")," can be anything.\nThe result of this that there aren't any predefined functions to extract the state information from the ",Object(r.b)("inlineCode",{parentName:"p"},"Entity"),".\nBut! We just learnt about ",Object(r.b)("inlineCode",{parentName:"p"},"Optics")," in the last chapter.\nLuckily CILib does have predefined ",Object(r.b)("inlineCode",{parentName:"p"},"Optics")," for where ",Object(r.b)("inlineCode",{parentName:"p"},"S")," is of type ",Object(r.b)("inlineCode",{parentName:"p"},"Mem"),".\nHowever, if were to choose your own custom type for the state parameter, you can (and it's recommend) define your own ",Object(r.b)("inlineCode",{parentName:"p"},"Optics")," for the type."),Object(r.b)("h3",{id:"individual"},"Individual"),Object(r.b)("p",null,"Now ",Object(r.b)("inlineCode",{parentName:"p"},"Entity")," is great for PSO algorithms because it is able to hold a state.\nFor genetic algorithms, however, you do not need a state.\nThus we could pass a ",Object(r.b)("inlineCode",{parentName:"p"},"Unit")," for the state to create an individual."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-scala"}),"val interval = Interval(-5.12,5.12)^3\nval individual = Position.createPosition(interval).map(p => Entity((), p))\n")),Object(r.b)("p",null,"This is actually a type within the ",Object(r.b)("inlineCode",{parentName:"p"},"GA")," package called ",Object(r.b)("inlineCode",{parentName:"p"},"Individual"),".\nWe will look at it more when we get to the second part of the book."),Object(r.b)("h2",{id:"entity-companion-object"},"Entity Companion Object"),Object(r.b)("p",null,"By now we understand what is ",Object(r.b)("inlineCode",{parentName:"p"},"Entity"),".\nAnd the companion object offers us a few methods."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-scala"}),"implicit def entityEqual[S,A:scalaz.Equal]: scalaz.Equal[Entity[S,A]]\n\nimplicit def entityFitness[S,A]: Fitness[Entity[S,?],A]\n")),Object(r.b)("h3",{id:"entityequal"},"entityEqual"),Object(r.b)("p",null,"This ",Object(r.b)("inlineCode",{parentName:"p"},"implicit")," will determine if two ",Object(r.b)("inlineCode",{parentName:"p"},"Entities")," are equal.\nThis is useful for example in a DE where you would avoid selecting duplicate ",Object(r.b)("inlineCode",{parentName:"p"},"Entities")," when producing a trial vector."),Object(r.b)("h3",{id:"entityfitness"},"entityFitness"),Object(r.b)("p",null,"Used in places where retrieving the fitness of an ",Object(r.b)("inlineCode",{parentName:"p"},"Entity"),".\nFor example, in a tournament selection."),Object(r.b)("h2",{id:"summary"},"Summary"),Object(r.b)("p",null,"We explored every aspect of ",Object(r.b)("inlineCode",{parentName:"p"},"Entity"),".\nAnd to reiterate"),Object(r.b)("div",{class:"callout callout-info"},Object(r.b)("p",null,"An ",Object(r.b)("inlineCode",{parentName:"p"},"Entity")," is a simple structure that contains and manages two very\nspecific things:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"A ",Object(r.b)("inlineCode",{parentName:"li"},"Position[A]")," within the current search space of the problem"),Object(r.b)("li",{parentName:"ul"},'A "state" that contains all addition data required by the ',Object(r.b)("inlineCode",{parentName:"li"},"Entity"),"\nwhich is not managed by the ",Object(r.b)("inlineCode",{parentName:"li"},"Position[A]"),"."))),Object(r.b)("p",null,"But wait! We were introduced to two things we had not seen before.\nThat being"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Step")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Environment"))),Object(r.b)("p",null,'Now, if you are asking "What are those?"\nFear not as we find out in the next chapter of "A Guide to CILib"!'))}b.isMDXComponent=!0},189:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var i=n(0),a=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),s=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},b=function(e){var t=s(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=Object(i.forwardRef)((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=s(n),u=i,m=b["".concat(o,".").concat(u)]||b[u]||d[u]||r;return n?a.a.createElement(m,l({ref:t},p,{components:n})):a.a.createElement(m,l({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);