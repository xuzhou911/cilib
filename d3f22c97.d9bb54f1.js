(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{176:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"rightToc",(function(){return r})),n.d(t,"metadata",(function(){return l})),n.d(t,"default",(function(){return b}));var a=n(1),i=n(9),o=(n(0),n(189)),s={id:"constraint",title:"Constraints"},r=[{value:"Constraint Classes",id:"constraint-classes",children:[{value:"ConstraintFunction",id:"constraintfunction",children:[]},{value:"Constraint Example",id:"constraint-example",children:[]}]},{value:"Constraint Companion Object",id:"constraint-companion-object",children:[{value:"satisfies",id:"satisfies",children:[]},{value:"violationCount",id:"violationcount",children:[]},{value:"violationMagnitude",id:"violationmagnitude",children:[]}]},{value:"Exercises",id:"exercises",children:[{value:"Question 1",id:"question-1",children:[]},{value:"Question 2",id:"question-2",children:[]}]},{value:"Summary",id:"summary",children:[]}],l={id:"community-tutorial/constraint",title:"Constraints",description:"As we begin to explore more of the core concepts of CILib we start to see how they are utilized by other concepts.",source:"@site/docs/community-tutorial/constraint.md",permalink:"/docs/community-tutorial/constraint"},c={rightToc:r,metadata:l},u="wrapper";function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)(u,Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"As we begin to explore more of the core concepts of CILib we start to see how they are utilized by other concepts.\nWith this in mind, you might see types specific to CILib you haven't come across yet.\nDont worry, these will be explained in their appropriate sections later in the book.\nIn this chapter we are going to look at ",Object(o.b)("inlineCode",{parentName:"p"},"Constraint"),".\n",Object(o.b)("inlineCode",{parentName:"p"},"Constraints")," are used to place, you guessed it, constraints on random variables.\n",Object(o.b)("inlineCode",{parentName:"p"},"Constraint")," provides us with several types as well as a companion object for us to use."),Object(o.b)("h2",{id:"constraint-classes"},"Constraint Classes"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),"LessThan[A,B](f: ConstraintFunction[A,B], v: B)\n\nLessThanEqual[A,B](f: ConstraintFunction[A,B], v: B)\n\nEqual[A,B](f: ConstraintFunction[A,B], v: B)\n\nInInterval[A,B](f: ConstraintFunction[A,B], interval: Interval[B])\n\nGreaterThan[A,B](f: ConstraintFunction[A,B], v: B)\n\nGreaterThanEqual[A,B](f: ConstraintFunction[A,B], v: B)\n")),Object(o.b)("p",null,"All ",Object(o.b)("inlineCode",{parentName:"p"},"Constraint")," classes make use of two parameters"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"The constraint function that will compute a result"),Object(o.b)("li",{parentName:"ul"},"An expected or appropriate value to compare against the result")),Object(o.b)("p",null,"What are ",Object(o.b)("inlineCode",{parentName:"p"},"Constraint")," classes used for?\nWell, it allows us to define the context for which our constraint isd based on.\nFor example, we need the sum of our list of numbers to be less than 12.\nOur ",Object(o.b)("inlineCode",{parentName:"p"},"ConstraintFunction")," computes the sum of all the values in the list.\nThis context can then be used in other core components to determine if a list of numbers is a feasible or infeasible solution,\nby comparing it with 12, our second parameter."),Object(o.b)("h3",{id:"constraintfunction"},"ConstraintFunction"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"ConstraintFunction")," has a simple class definition ",Object(o.b)("inlineCode",{parentName:"p"},"ConstraintFunction[A,B](f: NonEmptyList[A] => B)"),".\nAll we have to do is supply a function that will that takes a ",Object(o.b)("inlineCode",{parentName:"p"},"NonEmptyList")," and produces a result."),Object(o.b)("div",{class:"callout callout-info"},Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"ConstraintFunctions")," are used to produce a result that we may use to compare with in our constraint.")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),"import cilib._\nimport scalaz._\nimport Scalaz._\nval sumCF = ConstraintFunction((l: NonEmptyList[Double]) => l.suml)\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),"sumCF(NonEmptyList(2.0, 4.0, 7.5))\n// res0: Double = 13.5\n")),Object(o.b)("h3",{id:"constraint-example"},"Constraint Example"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),"LessThan(sumCF, 12.0)\n// res1: LessThan[Double] = LessThan(ConstraintFunction(<function1>), 12.0)\n")),Object(o.b)("p",null,"We have successfully defined our constraint context.\nHold on to this because we are going to put it into action in the next section."),Object(o.b)("h2",{id:"constraint-companion-object"},"Constraint Companion Object"),Object(o.b)("div",{class:"callout callout-info"},Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"Constraint")," object allows us to use our defined constraints against ",Object(o.b)("inlineCode",{parentName:"p"},"NonEmptyLists"),".")),Object(o.b)("p",null,"Through the object we are able to make use og the following methods"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),"satisfies[A,B:Fractional](constraint: Constraint[A,B], cs: NonEmptyList[A])(implicit ev: Eq[B]): Boolean\n\nviolationCount[A,B:Fractional](constraints: List[Constraint[A,B]], cs: NonEmptyList[A]): ViolationCount\n\nviolationMagnitude[A,B:Fractional](beta: Double, eta: Double, constraints: List[Constraint[A,B]], cs: NonEmptyList[A])(implicit e: Eq[B]): Double\n")),Object(o.b)("h3",{id:"satisfies"},"satisfies"),Object(o.b)("p",null,"Given a ",Object(o.b)("inlineCode",{parentName:"p"},"NonEmptyList"),", it will be checked using the given ",Object(o.b)("inlineCode",{parentName:"p"},"Constraint")," and a ",Object(o.b)("inlineCode",{parentName:"p"},"Boolean")," will be returned to indicate if\nthe list meets the constraints."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),"import spire.implicits._\n\nval sumLessThanCons = LessThan(sumCF, 12.0)\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),"Constraint.satisfies(sumLessThanCons, NonEmptyList(2.0, 3.0, 4.0))\n// res2: Boolean = true\nConstraint.satisfies(sumLessThanCons, NonEmptyList(9.0, 10.0, 11.0))\n// res3: Boolean = false\n")),Object(o.b)("h3",{id:"violationcount"},"violationCount"),Object(o.b)("p",null,"A ",Object(o.b)("inlineCode",{parentName:"p"},"NonEmptyList")," will be checked against a ",Object(o.b)("inlineCode",{parentName:"p"},"List")," of ",Object(o.b)("inlineCode",{parentName:"p"},"Constraints"),".\nAn ",Object(o.b)("inlineCode",{parentName:"p"},"Int")," is returned representing the number of ",Object(o.b)("inlineCode",{parentName:"p"},"Constraints")," the list violated."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),"import spire.implicits._\nimport spire.algebra.Eq\n\n// A constraint that ensures the first element of a list is 4\nval firstNumberCons = cilib.Equal(ConstraintFunction((l: NonEmptyList[Double]) => l.head), 4.0)\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),"Constraint.violationCount(List(sumLessThanCons, firstNumberCons), NonEmptyList(19.0, 37.23, 12.0))\n// res4: ViolationCount = cilib.ViolationCount@2\nConstraint.violationCount(List(sumLessThanCons, firstNumberCons), NonEmptyList(4.0, 3.0, 2.0))\n// res5: ViolationCount = cilib.ViolationCount@0\nConstraint.violationCount(List(sumLessThanCons, firstNumberCons), NonEmptyList(4.0, 3.0, 2.0)).count\n// res6: Int = 0\n")),Object(o.b)("h3",{id:"violationmagnitude"},"violationMagnitude"),Object(o.b)("p",null,"Determines the magnitude of the number of violated constraints."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),"Constraint.violationMagnitude(0.1, 0.9, List(sumLessThanCons, firstNumberCons), NonEmptyList(19.0, 37.23, 12.0))\n// res7: Double = 4.607244083273596\n")),Object(o.b)("h2",{id:"exercises"},"Exercises"),Object(o.b)("h3",{id:"question-1"},"Question 1"),Object(o.b)("p",null,"Define a ",Object(o.b)("inlineCode",{parentName:"p"},"Constraint")," to ensure that the head of a list is between 5 and 10."),Object(o.b)("div",{class:"solution"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),"import spire.math.Interval\nInInterval(ConstraintFunction((l: NonEmptyList[Double]) => l.head), Interval(5, 10))\n"))),Object(o.b)("h3",{id:"question-2"},"Question 2"),Object(o.b)("p",null,"Assume random numbers are generated between 5 and 10.\nWrite a function that accepts such a list and returns true or false\nwhether the list meets the constraint you defined in the previous question.\nYou need to check each element in the list."),Object(o.b)("div",{class:"solution"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),"val cons = InInterval(ConstraintFunction((l: NonEmptyList[Double]) => l.head), Interval(5, 10))\ndef checkList(l: List[Double]): Boolean = {\n    if (l.size == 0) {\n        true\n    } else {\n        val head = NonEmptyList(l.head)\n        Constraint.satisfies(cons, head) && checkList(l.tail)\n    }\n}\n"))),Object(o.b)("h2",{id:"summary"},"Summary"),Object(o.b)("p",null,"We now know how to implement constraints on our lists.\nIn the next chapter we will see how ",Object(o.b)("inlineCode",{parentName:"p"},"Constraints")," are used further in CILib."),Object(o.b)("div",{class:"callout callout-info"},Object(o.b)("p",null,"All ",Object(o.b)("inlineCode",{parentName:"p"},"Constraint")," classes make use of two parameters"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"The constraint function that will compute a result"),Object(o.b)("li",{parentName:"ul"},"An expected or appropriate value to compare against the result")),Object(o.b)("p",null,"This defines a constraint context that can used on ",Object(o.b)("inlineCode",{parentName:"p"},"NonEmptyLists")," through the companion object.")))}b.isMDXComponent=!0},189:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),u=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r({},t,{},e)),n},b=function(e){var t=u(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=u(n),p=a,d=b["".concat(s,".").concat(p)]||b[p]||m[p]||o;return n?i.a.createElement(d,r({ref:t},c,{components:n})):i.a.createElement(d,r({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[p]="string"==typeof e?e:a,s[1]=r;for(var c=2;c<o;c++)s[c]=n[c];return i.a.createElement.apply(null,s)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);