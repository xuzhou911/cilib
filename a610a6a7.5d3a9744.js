(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{163:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"rightToc",(function(){return l})),n.d(t,"metadata",(function(){return c})),n.d(t,"default",(function(){return u}));var i=n(1),o=n(9),a=(n(0),n(189)),r={id:"selection",title:"Selection"},l=[{value:"Selection Object",id:"selection-object",children:[{value:"Example 1 - Tournament Selection",id:"example-1---tournament-selection",children:[]},{value:"Example 2 - Distance Neighbours Selection",id:"example-2---distance-neighbours-selection",children:[]}]},{value:"Summary",id:"summary",children:[]}],c={id:"community-tutorial/selection",title:"Selection",description:"At some point during our computational intelligence we will need to make selections on entities.",source:"@site/docs/community-tutorial/selection.md",permalink:"/docs/community-tutorial/selection"},s={rightToc:l,metadata:c},p="wrapper";function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)(p,Object(i.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"At some point during our computational intelligence we will need to make selections on entities.\nSuch as a tournament selection used in a genetic algorithm.\nNow luckily, CILib has several selection methods available for us to use.\nThus, this chapter's focus is going to be looking at how we can make use of these methods."),Object(a.b)("h2",{id:"selection-object"},"Selection Object"),Object(a.b)("p",null,"All of our selection based needs can be solved with the ",Object(a.b)("inlineCode",{parentName:"p"},"Selection")," object.\nThis object is simple in regards that is it acts as a helper object to contain methods to create selection functions.\nLike a companion object without the companion part.\nAnother interesting point is that all the methods in the object return functions.\nThe reason for this is so that we may, for example, specify types to a general\ntournament selection method to return a tournament function specify to our types.\nNow that we are familiar with the ",Object(a.b)("inlineCode",{parentName:"p"},"Selection")," object, here is a list of the currently available:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Index Neighbours"),Object(a.b)("li",{parentName:"ul"},"Lattice Neighbours"),Object(a.b)("li",{parentName:"ul"},"Distance Neighbours"),Object(a.b)("li",{parentName:"ul"},"Wheel"),Object(a.b)("li",{parentName:"ul"},"Star"),Object(a.b)("li",{parentName:"ul"},"Tournament")),Object(a.b)("p",null,"With the following formal definitions:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-scala"}),"indexNeighbours[A](n: Int): (NonEmptyList[A], A) => List[A]\n\nlatticeNeighbours[A: scalaz.Equal]: (NonEmptyList[A], A) => List[A]\n\ndistanceNeighbours[F[_]: Foldable, A: Order](distance: MetricSpace[F[A],A])(n: Int): (NonEmptyList[F[A]], F[A]) => List[F[A]]\n\nwheel[A]: (NonEmptyList[A], A) => List[A]\n\nstar[A]: (NonEmptyList[A], A) => List[A]\n\ntournament[F[_],A](n: Int, l: NonEmptyList[F[A]])(implicit F: Fitness[F,A]): Comparison => RVar[Option[F[A]]]\n")),Object(a.b)("p",null,"Most of functions returned require some ",Object(a.b)("inlineCode",{parentName:"p"},"NonEmptyList")," of type ",Object(a.b)("inlineCode",{parentName:"p"},"A"),", with another value of Type ",Object(a.b)("inlineCode",{parentName:"p"},"A"),".\nHowever, ",Object(a.b)("inlineCode",{parentName:"p"},"distanceNeighbours")," and ",Object(a.b)("inlineCode",{parentName:"p"},"tournament")," are a bit unique so we will exploring these in our examples."),Object(a.b)("h3",{id:"example-1---tournament-selection"},"Example 1 - Tournament Selection"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-scala",metastring:":silent",":silent":!0}),"import cilib._\nimport scalaz._\nimport Scalaz._\nimport eu.timepit.refined.auto._\nimport spire.implicits.{eu => _, _}\nimport spire.math.Interval\n\nval rng = RNG.init(12L)\nval intervals = NonEmptyList(Interval(-5.0, 5.0), Interval(10.0, 15.0))\nval e = Eval.unconstrained[NonEmptyList,Double](_.map(x => x*x).suml).eval\nval solutions = Position.createPositions(intervals, 9).eval(rng).map(p => Position.eval(e, p).eval(rng))\n")),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-scala"}),"Selection.tournament(3, solutions).apply(Comparison.dominance(Max)).eval(rng).get\n")),Object(a.b)("p",null,"What is going on here is that we created ",Object(a.b)("inlineCode",{parentName:"p"},"List")," of 9 ",Object(a.b)("inlineCode",{parentName:"p"},"Solutions"),".\nWe then passed the solutions to the tournament selection along with an ",Object(a.b)("inlineCode",{parentName:"p"},"Int")," that represents how many ",Object(a.b)("inlineCode",{parentName:"p"},"Solutions")," will partake in the tournament."),Object(a.b)("h3",{id:"example-2---distance-neighbours-selection"},"Example 2 - Distance Neighbours Selection"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-scala",metastring:":silent",":silent":!0}),"import cilib._\nimport scalaz._\nimport Scalaz._\nimport spire.implicits._\n\nval a = NonEmptyList(1.0, 2.0)\nval b = NonEmptyList(3.0, 4.0)\nval c = NonEmptyList(5.0, 6.0)\nval d = NonEmptyList(7.0, 8.0)\nval e = NonEmptyList(9.0, 10.0)\nval collection = NonEmptyList(a, b, c, d, e)\n")),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-scala"}),"val ringDistance = Selection.distanceNeighbours[NonEmptyList,Double](MetricSpace.euclidean)(3)\n\nringDistance(collection, a)\nringDistance(collection, c)\nringDistance(collection, e)\n")),Object(a.b)("p",null,"Here we used our knowledge of the previous chapter, metric spaces, to create a selection based on the distance between neighbours."),Object(a.b)("h2",{id:"summary"},"Summary"),Object(a.b)("p",null,"Selection methods are extremely important in computational intelligence.\nAlthough CILib offers us several, it is really up to you as to how you want to use them.\nRemember CILib gives you the building blocks, it's up to you to choose how you want to piece them together."))}u.isMDXComponent=!0},189:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h}));var i=n(0),o=n.n(i);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),p=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},u=function(e){var t=p(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},m="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=Object(i.forwardRef)((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,r=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,d=u["".concat(r,".").concat(m)]||u[m]||b[m]||a;return n?o.a.createElement(d,l({ref:t},s,{components:n})):o.a.createElement(d,l({ref:t},s))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[m]="string"==typeof e?e:i,r[1]=l;for(var s=2;s<a;s++)r[s]=n[s];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);